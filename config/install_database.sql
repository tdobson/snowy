-- Create the 'snowy' database if it does not exist
CREATE DATABASE IF NOT EXISTS snowy;
USE snowy;

-- Now, proceed with creating tables within the 'snowy' database

-- Table: sn_import_events
-- This table logs import events, such as data imports, and links them to users.
CREATE TABLE IF NOT EXISTS sn_import_events (
    import_id CHAR(36) NOT NULL,      -- Unique identifier for each import event.
    import_date DATE NOT NULL,        -- Date of the import event.
    imported_by CHAR(36) NOT NULL,    -- Foreign key to 'sn_users', identifying the user who performed the import.
        instance_id CHAR(36),              -- Instance that the event is attached to.
    modified_date DATE NOT NULL,      -- Date of the last modification event.
    modified_by CHAR(36),             -- Foreign key to 'sn_users', identifying the user who performed the import.
    modification_ref VARCHAR(255),    -- Reference identifier for the import event.
    import_ref VARCHAR(255),          -- Reference identifier for the import event.
    import_source VARCHAR(255),       -- Source of the imported data.
    import_notes TEXT,                -- Additional notes or comments about the import event.
    PRIMARY KEY (import_id)
    -- Removed FOREIGN KEY constraints to avoid circular dependency
);

-- Table: sn_users
-- Description: This table stores information about users within the Snowy system. It includes their basic details,
-- roles, team affiliations, and links to their import events.
CREATE TABLE IF NOT EXISTS sn_users (
    user_id CHAR(36) NOT NULL,        -- Unique identifier for each user. Typically a UUID.
    sso_id VARCHAR(255),              -- Single Sign-On identifier for the user, if applicable.
    instance_id CHAR(36),              -- Instance that the user is attached to.
    name VARCHAR(255) NOT NULL,       -- Full name of the user.
    email VARCHAR(255) UNIQUE NOT NULL, -- Email address of the user. Marked unique to prevent duplicate entries.
    password VARCHAR(255),            -- Salted bcrypt2 password. Can be null as not all users actually can login.
    phone VARCHAR(255),               -- Phone address of the user.
    employer VARCHAR(255),            -- Name of the user's employer. Helps in categorizing users by their organization.
    team CHAR(36),                    -- Foreign key linking to the 'sn_teams' table. Indicates the team the user belongs to.
    dispatch_id VARCHAR(255),         -- Identifier used for Device Magic dispatching purposes, if applicable.
    snowy_role VARCHAR(255) NOT NULL, -- Role of the user within the Snowy application. E.g., Administrator, Contact, Viewer.
    company_role VARCHAR(255),        -- Role of the user within their company. This is more about their job title or position.
    import_id CHAR(36),               -- Foreign key linking to the 'sn_import_events' table. Helps in tracking the import event related to this user.
    category CHAR(36),                -- Human/Company/Etc.
    user_address_id CHAR(36),         -- Address details.
    reset_token VARCHAR(255),         -- Password reset token (nullable).
    reset_token_expires DATETIME,     -- Expiry time for the reset token (nullable).
    PRIMARY KEY (user_id)
);


-- Table: sn_projects
-- This table stores all projects. Each project is linked to a client and a site, and it contains various project-specific details.
CREATE TABLE IF NOT EXISTS sn_projects (
    project_id CHAR(36) NOT NULL,     -- Primary Key: Unique identifier for each project. Source: this is autogenerated uniquely.
    client_id CHAR(36) NOT NULL,      -- Links to a client in the sn_clients table.
    instance_id CHAR(36),              -- Instance that the user is attached to.
    pv_number VARCHAR(255) UNIQUE NOT NULL, -- PV number, unique to each project.
    dno_details_id CHAR(36) ,         -- Reference to DNO MPAN details.
    region_id CHAR(36),               -- Identifier linking to a specific region in the sn_region table.
    site_id CHAR(36),                 -- Identifier linking to a specific site in the sn_sites table.
    ref_number VARCHAR(255),          -- Legacy reference number.
    project_name VARCHAR(255),        -- Descriptive name of the project.
    job_code VARCHAR(255),            -- Client's internal reference code for the project.
    comments TEXT,                    -- Additional comments or notes about the project.
    import_id CHAR(36),               -- Links to an import event in the sn_import_events table.
    project_process_id CHAR(36),              -- links to sn_project_process tables
    dno_zone VARCHAR(255),             -- Zone identifier for the DNO.
    PRIMARY KEY (project_id)
);

-- Table: sn_project_process
-- Each approval process is uniquely identified and linked to a project.
CREATE TABLE IF NOT EXISTS sn_project_process (
    project_process_id CHAR(36) NOT NULL,    -- Primary Key: Unique identifier for each approval process.
    approval_status CHAR(36),         -- Links to the current status of the approval in sn_status.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    deadline_to_connect DATE,         -- Deadline for the project to establish a connection.
    auth_letter_sent BOOLEAN,         -- Indicates whether the letter of authority has been sent.
    mpan_request_sent BOOLEAN,        -- Indicates if the MPAN request has been sent.
    schematic_created BOOLEAN,        -- Indicates if the project's schematic has been created.
    application_type VARCHAR(255),    -- Specifies the type of application.
    formal_dno_submitted BOOLEAN,     -- Indicates if the formal submission to the DNO has been made.
    submission_date DATE,             -- Date on which the paperwork was submitted.
    dno_due_date DATE,                -- Due date for the DNO to respond.
    dno_status CHAR(36),              -- Current status related to the DNO approval.
    approved_kwp FLOAT,               -- Amount of kilowatt-peak approved by the DNO.
    quote_received BOOLEAN,           -- Indicates whether a quote has been received.
    customer_invoiced_date DATE,      -- Date on which the customer was invoiced.
    dno_payment_made DATE,            -- Date on which payment was made to the DNO.
    acceptance_form_returned BOOLEAN, -- Indicates if the acceptance form has been returned.
    date_approved DATE,               -- Date on which the project received approval.
    import_id CHAR(36),               -- Links to an import event in the sn_import_events table.
    PRIMARY KEY (project_process_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_plots
-- This table stores information about individual plots in projects.
CREATE TABLE IF NOT EXISTS sn_plots (
    plot_id CHAR(36) NOT NULL,                  -- Unique identifier for each plot.
    project_id CHAR(36) NOT NULL,               -- Identifies the project the plot belongs to. // from importProjectDetails
    instance_id CHAR(36),              -- Instance that the user is attached to.
    plot_install_id CHAR(36) NOT NULL,               -- Identifies the plot install from importPlotInstallData
    plot_number VARCHAR(255) NOT NULL,          -- Alphanumeric identifier for the plot.
    plot_status CHAR(36),                       -- Indicates the current status of the plot. // from importStatus
    site_id CHAR(36),                              -- Identifies the site where the plot is located. // from importSiteData
    housetype VARCHAR(255),                     -- Description of the type of house on the plot.
    g99 BOOLEAN,                                -- Indicates whether G99 standards apply.
    mpan VARCHAR(255),                          -- MPAN for the plot.
    plot_address_id CHAR(36),                   -- Plot Address ID. // from importAddressData
    plot_approved BOOLEAN,                      -- Indicates whether the plot has been approved.
    commissioning_form_submitted BOOLEAN,       -- Indicates whether the commissioning form has been submitted.
    import_id CHAR(36),                         -- Identifier for data import.
    tracker_ref CHAR(36),                       -- Reference to a tracking system.
    PRIMARY KEY (plot_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_plot_spec
-- This table holds the specifications for individual plots.
CREATE TABLE IF NOT EXISTS sn_plot_spec (
    plot_spec_id CHAR(36) NOT NULL,             -- Unique identifier for the plot specification.
    plot_id CHAR(36) NOT NULL,                  -- Unique identifier for each plot.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    date_specified DATE,                        -- Date when this specification was made.
    specified_by CHAR(36),                      -- User ID of the person who specified this plot.
    plot_spec_status CHAR(36),                  -- Status of the plot.
    phase INT,                                  -- 1 phase or 3 phase.
    p1 FLOAT,                                   -- Details specific to phase 1.
    p2 FLOAT,                                   -- Details specific to phase 2, if applicable.
    p3 FLOAT,                                   -- Details specific to phase 3, if applicable.
    annual_yield FLOAT,                         -- Expected annual yield from the plot.
    kwp FLOAT,                                  -- Kilowatt-peak of the plot without limitations.
    kwp_with_limitation FLOAT,                  -- Kilowatt-peak with limitations applied.
    limiter_required BOOLEAN,                   -- Whether a limiter is required for the plot.
    limiter_value_if_not_zero FLOAT,            -- Value of the limiter if not zero.
    labour_cost FLOAT,                          -- Labour cost for the plot in Â£.
    meter CHAR(36),                             -- Meter product ID.
    meter_cost FLOAT,                           -- Cost of the meter.
    battery CHAR(36),                           -- Battery product ID.
    battery_cost FLOAT,                         -- Cost of the battery.
    overall_cost FLOAT,                         -- Total cost associated with this plot.
    landlord_supply BOOLEAN,                    -- Indicates if the landlord is responsible for the supply.
    import_id CHAR(36),                         -- Identifier for the import record.
    PRIMARY KEY (plot_spec_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_clients
-- This table stores information about each client.
CREATE TABLE IF NOT EXISTS sn_clients (
    client_id CHAR(36) NOT NULL,                -- Unique identifier for each client.
    instance_id CHAR(36),              -- Instance that the user is attached to.
    client_legacy_number VARCHAR(255),          -- Old unique client identifier.
    client_name VARCHAR(255) NOT NULL UNIQUE,   -- Name of the client.
    client_address_id CHAR(36),                   -- Address details.
    client_plot_card_required VARCHAR(255),     -- Type of plot card required by the client (null if not required).
    contact_id CHAR(36),                    -- Name of the primary contact for the client.
    import_id CHAR(36),                         -- Identifier for the import event.
    PRIMARY KEY (client_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_plot_install
-- This table records details about the installation of each plot.
CREATE TABLE IF NOT EXISTS sn_plot_install (
    plot_install_id CHAR(36) NOT NULL,          -- Unique identifier for each installed plot.
    plot_id CHAR(36) NOT NULL,                  -- Unique identifier for each plot.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    date_install DATE,                          -- Date when the plot was actually installed.
    date_checked DATE,                          -- Date when the installation was checked.
    install_by CHAR(36),                        -- User ID of the person who installed the plot.
    checked_by CHAR(36),                        -- User ID of the person who checked the plot.
    plot_install_status CHAR(36) NOT NULL,      -- Current status of the plot by installation.
    phase INT,                                  -- Whether it's 1 phase or 3 phase.
    p1 FLOAT,                                   -- Details specific to phase 1.
    p2 FLOAT,                                   -- Details specific to phase 2, if applicable.
    p3 FLOAT,                                   -- Details specific to phase 3, if applicable.
    annual_yield FLOAT,                         -- Expected annual yield from the plot.
    kwp FLOAT,                                  -- Kilowatt-peak of the plot without limitations.
    kwp_with_limitation FLOAT,                  -- Kilowatt-peak with limitations.
    limiter_required BOOLEAN,                   -- Indicates if a power limiter was required.
    limiter_value_if_not_zero FLOAT,            -- Value of the limiter if not zero.
    labour_cost FLOAT,                          -- Labour cost of the installation.
    meter CHAR(36),                             -- Meter product ID.
    meter_cost FLOAT,                           -- Cost of the meter.
    battery CHAR(36),                           -- Battery product ID.
    battery_cost FLOAT,                         -- Cost of the battery.
    overall_cost FLOAT,                         -- Total cost of the installation.
    mcs_submission_id CHAR(36),                 -- MCS Submission ID.
    import_id CHAR(36),                         -- Import event ID for traceability.
    PRIMARY KEY (plot_install_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_elevations_spec
-- Details the elevations of each plot, crucial in solar installations.
CREATE TABLE IF NOT EXISTS sn_elevations_spec (
    elevation_spec_id CHAR(36) NOT NULL,    -- Unique identifier for each elevation record.
    plot_spec_id CHAR(36) NOT NULL,     -- Reference to the plot, either as specified or as installed.
    plot_id CHAR(36) NOT NULL,         -- Plot identifier.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    type_test_ref VARCHAR(255),        -- Reference to a type test or other technical specification.
    pitch FLOAT,                       -- Pitch of the installation surface.
    orientation VARCHAR(255),          -- Orientation of the solar panels.
    kk_figure FLOAT,                   -- Figure used in calculations.
    kwp FLOAT,                         -- Kilowatt-peak at this elevation.
    strings INT,                       -- Number of strings in the solar setup.
    module_qty INT,                    -- Quantity of modules in the setup.
    inverter CHAR(36),             -- Identifier for the inverter used.
    inverter_cost FLOAT,               -- Cost of the inverter.
    panel CHAR(36),                -- Identifier for the solar panel type.
    panel_cost FLOAT,                  -- Cost of the solar panels.
    panels_total_cost FLOAT,           -- Total cost of all panels used.
    roof_kit CHAR(36),             -- Identifier for the roof mounting kit.
    roof_kit_cost FLOAT,               -- Cost of the roof mounting kit.
    annual_yield FLOAT,                -- Expected annual energy yield.
    import_id CHAR(36),                -- Import event ID.
    PRIMARY KEY (elevation_spec_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_elevations
-- Details the elevations of each plot, crucial in solar installations.
CREATE TABLE IF NOT EXISTS sn_elevations_install (
    elevation_install_id CHAR(36) NOT NULL,    -- Unique identifier for each elevation record.
    plot_install_id CHAR(36) NOT NULL,     -- Reference to the plot, either as specified or as installed.
    plot_id CHAR(36) NOT NULL,         -- Plot identifier.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    type_test_ref VARCHAR(255),        -- Reference to a type test or other technical specification.
    pitch FLOAT,                       -- Pitch of the installation surface.
    orientation VARCHAR(255),          -- Orientation of the solar panels.
    kk_figure FLOAT,                   -- Figure used in calculations.
    kwp FLOAT,                         -- Kilowatt-peak at this elevation.
    strings INT,                       -- Number of strings in the solar setup.
    module_qty INT,                    -- Quantity of modules in the setup.
    inverter CHAR(36),             -- Identifier for the inverter used.
    inverter_cost FLOAT,               -- Cost of the inverter.
    panel CHAR(36),                -- Identifier for the solar panel type.
    panel_cost FLOAT,                  -- Cost of the solar panels.
    panels_total_cost FLOAT,           -- Total cost of all panels used.
    roof_kit CHAR(36),             -- Identifier for the roof mounting kit.
    roof_kit_cost FLOAT,               -- Cost of the roof mounting kit.
    annual_yield FLOAT,                -- Expected annual energy yield.
    import_id CHAR(36),                -- Import event ID.
    PRIMARY KEY (elevation_install_id)
    -- FOREIGN KEY constraints omitted
);


-- Table: sn_form_submissions
-- Tracks form submissions related to plots, sites, and products.
CREATE TABLE IF NOT EXISTS sn_form_submissions (
    submission_id CHAR(36) NOT NULL,   -- Unique identifier for each submission.
    instance_id CHAR(36),              -- Instance that the user is attached to.
    dm_submission_id VARCHAR(255) UNIQUE NOT NULL, -- Device magic key.
    plot_id CHAR(36) NOT NULL,         -- Foreign key to 'sn_plots'.
    job_id CHAR(36) NOT NULL,          -- Foreign key to 'sn_sites'.
    import_id CHAR(36),                -- Import event ID.
    PRIMARY KEY (submission_id)
    -- FOREIGN KEY constraints omitted
);


-- Table: sn_jobs
-- Tracks jobs assigned to plots and projects, and their statuses.
CREATE TABLE IF NOT EXISTS sn_jobs (
    job_id CHAR(36) NOT NULL,               -- Unique identifier for each job.
    instance_id CHAR(36),              -- Instance that the user is attached to.
    plot_id CHAR(36) NOT NULL,              -- Identifying the plot associated with the job.
    project_id CHAR(36) NOT NULL,           -- Identifying the project associated with the job.
    user_id CHAR(36) NOT NULL,              -- Identifying the user responsible for the job.
    slot_id CHAR(36) NOT NULL,              -- Linking the job to a specific time slot.
    job_status CHAR(36) NOT NULL,           -- Indicating the status of the job.
    dispatch_id VARCHAR(255),               -- Dispatch identifier for the job.
    submission_id CHAR(36),                 -- Linking the job to a submission.
    dispatched_at DATE,                     -- Date when the job was dispatched.
    dispatched_by CHAR(36),                 -- Identifying the user who dispatched the job.
    returned_at DATE,                       -- Date when the job was returned.
    returned_by CHAR(36),                   -- Identifying the user who returned the job.
    dispatch_team CHAR(36),                 -- Identifying the team responsible for the dispatch.
    import_id CHAR(36),                     -- Import event ID.
    PRIMARY KEY (job_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_teams
-- Stores information about teams within the organization.
CREATE TABLE IF NOT EXISTS sn_teams (
    team_id CHAR(36) NOT NULL,              -- Unique identifier for each team.
    instance_id CHAR(36),              -- Instance that the team is attached to.
    team_name VARCHAR(255) UNIQUE NOT NULL, -- Name of the team.
    team_description VARCHAR(255),          -- Description of the team's purpose and role.
    import_id CHAR(36),                     -- Import event ID.
    PRIMARY KEY (team_id)
    -- FOREIGN KEY constraints omitted
);


-- Table: sn_status
-- Defines various statuses that can be assigned to jobs.
CREATE TABLE IF NOT EXISTS sn_status (
    status_id CHAR(36) NOT NULL,               -- Unique identifier for each job status.
    instance_id CHAR(36),              -- Instance that the status is attached to.
    status_state VARCHAR(255) NOT NULL,        -- Status of the job status (e.g., approved).
    status_name VARCHAR(255) NOT NULL,         -- Name of the status (e.g., Plots dispatch).
    status_group VARCHAR(255) NOT NULL,         -- Name of the Group of statuses (e.g., "Plots dispatch statuses").
    status_code VARCHAR(255),                  -- Code associated with the job status (e.g., APR).
    status_description VARCHAR(510),           -- Short description of what this status means.
    import_id CHAR(36),                        -- Import event ID.
    PRIMARY KEY (status_id)
    -- FOREIGN KEY constraint omitted
);

-- Table: sn_slots
-- Manages time slots for jobs, ensuring proper scheduling.
CREATE TABLE IF NOT EXISTS sn_slots (
    slot_id CHAR(36) NOT NULL,                 -- Unique identifier for each slot.
    instance_id CHAR(36),              -- Instance that the slot is attached to.
    date DATE NOT NULL,                        -- Date for the slot.
    location_slot VARCHAR(255),                -- Location identifier for the slot.
    time_slot VARCHAR(255),                    -- Time identifier for the slot.
    job_id CHAR(36) NOT NULL,                  -- Linking the slot to a specific job.
    import_id CHAR(36),                        -- Import event ID.
    PRIMARY KEY (slot_id)
    -- FOREIGN KEY constraints omitted
);


-- Table: sn_addresses
-- Stores address details.
CREATE TABLE IF NOT EXISTS sn_addresses (
    address_id CHAR(36) NOT NULL,        -- Unique identifier for the address.
    address_line_1 VARCHAR(255),         -- First line of the address.
    address_line_2 VARCHAR(255),         -- Second line of the address.
    address_town VARCHAR(255),           -- Town of the address.
    address_county VARCHAR(255),         -- County of the address.
    address_postcode VARCHAR(255),       -- Postcode of the address.
    address_country VARCHAR(255),        -- Country of the address.
    address_region_id CHAR(36),          -- Region ID.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    import_id CHAR(36),                  -- Import event ID.
    PRIMARY KEY (address_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_sites
-- Details the sites where projects are located.
CREATE TABLE IF NOT EXISTS sn_sites (
    site_id CHAR(36) NOT NULL,           -- Unique identifier for the site.
    site_name CHAR(255),                -- the name of the site
    instance_id CHAR(36),              -- Instance that the site is attached to.
    dno_details_id CHAR(36),             -- DNO details ID.
    site_address_id CHAR(36),            -- Address details.
    site_manager_id CHAR(36),            -- User ID of the site manager.
    site_surveyor_id CHAR(36),            -- User ID of the site surveyor
    site_agent_id CHAR(36),            -- User ID of the site agent.
    import_id CHAR(36),                  -- Import event ID.
    PRIMARY KEY (site_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_dno_details
-- Contains details about Distribution Network Operators (DNOs).
CREATE TABLE IF NOT EXISTS sn_dno_details (
    dno_details_id CHAR(36) NOT NULL,    -- ID for each DNO entry.
    mpan_prefix INT UNIQUE NOT NULL,     -- Unique MPAN prefix.
    dno_name VARCHAR(255) NOT NULL, -- Name of the DNO.
    address VARCHAR(255),                -- Address of the DNO.
    email_address VARCHAR(255),          -- Email address for contacting the DNO.
    contact_no VARCHAR(255),             -- Contact phone number.
    internal_tel VARCHAR(255),           -- Internal telephone number.
    type VARCHAR(255),                   -- Type of DNO.
    instance_id CHAR(36),              -- Instance that the site is attached to.
    import_id CHAR(36),                  -- Import event ID.
    PRIMARY KEY (dno_details_id)
    -- FOREIGN KEY constraints omitted
);


-- Table: sn_region
-- Holds information about different regions for project allocation and management.
CREATE TABLE IF NOT EXISTS sn_region (
    region_id CHAR(36) NOT NULL,                -- Unique identifier for each region.
    instance_id CHAR(36),              -- Instance that the region is attached to.
    region_number CHAR(10) UNIQUE NOT NULL,     -- Numerical representation of the region.
    region_name VARCHAR(255),                   -- Name of the region.
    import_id CHAR(36),                         -- Import event ID.
    PRIMARY KEY (region_id)
    -- FOREIGN KEY constraint omitted
    -- UNIQUE constraint for region_number included in table creation
);

-- Table: sn_products
-- Holds information about various products such as Roof Kits, Panels, Batteries, Inverters, etc.
CREATE TABLE IF NOT EXISTS sn_products (
    product_id CHAR(36) NOT NULL,               -- Unique identifier for each product.
    instance_id CHAR(36),              -- Instance that the product is attached to.
    product_type VARCHAR(255),                  -- Type of the product.
    manufacturer VARCHAR(255),                  -- Manufacturer's name.
    product_model VARCHAR(255),                 -- Model of the product.
    product_name VARCHAR(255),                  -- Name of the product.
    kwp FLOAT,                                  -- Kilowatt-peak of the product.
    voc FLOAT,                                  -- Open circuit voltage (VOC).
    isc FLOAT,                                  -- Short circuit current (ISC).
    type VARCHAR(255),                          -- Product type.
    capacity FLOAT,                             -- Capacity of the product.
    no_phases INT,                              -- Number of phases.
    model_ref VARCHAR(255),                     -- Reference to the product model.
    cost_today FLOAT,                           -- Current cost of the product.
    mcs_product_reference VARCHAR(255),         -- MCS certification reference number.
    mcs_product_id VARCHAR(255),                -- MCS certification code.
    import_id CHAR(36),                         -- Import event ID.
    PRIMARY KEY (product_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_custom_fields
-- Stores custom fields for various entities (products, customers, orders, etc.) associated with specific instances or customers.
CREATE TABLE IF NOT EXISTS sn_custom_fields (
custom_field_id CHAR(36) PRIMARY KEY,           -- Unique identifier for each custom field record.
entity_type VARCHAR(50),                        -- Type of entity the custom field is associated with.
entity_id CHAR(36),                             -- Unique identifier of the entity the custom field is related to.
instance_id CHAR(36),                           -- Foreign key referencing the instance or customer.
field_name VARCHAR(255),                        -- Name or key of the custom field.
field_value TEXT,                               -- Actual value of the custom field.
field_ui_name VARCHAR(255),                     -- user editable name of field
field_description VARCHAR(255),                 -- user editable description of field
import_id CHAR(36)                              -- Import event that created or last updated the custom field record.
-- FOREIGN KEY (instance_id) REFERENCES sn_instances(id)
);

-- Table: sn_instances
-- Holds information about each customer or instance of the software.
CREATE TABLE IF NOT EXISTS sn_instances (
instance_id CHAR(36) PRIMARY KEY,               -- Unique identifier for each instance or customer.
instance_name_key VARCHAR(255),                 -- Unique key or identifier for the instance.
instance_name VARCHAR(255),                     -- Name of the instance or customer.
instance_description VARCHAR(255),              -- Brief description or additional information about the instance.
instance_logo_url VARCHAR(255),                 -- URL or file path of the logo associated with the instance.
instance_key_contact CHAR(36),                  -- Primary contact person for the instance.
import_id CHAR(36)                              -- Import event that created or last updated the instance record.
-- FOREIGN KEY (instance_id) REFERENCES sn_instances(id)
);



-- Table: sn_mcs_submission
-- Stores submissions related to the Microgeneration Certification Scheme (MCS) for products.
CREATE TABLE IF NOT EXISTS sn_mcs_submission (
    mcs_submission_id CHAR(36) NOT NULL,             -- Unique identifier for each MCS submission record.
    mcs_submit_status CHAR(36) NOT NULL,             -- Submission Status identifier.
    instance_id CHAR(36),              -- Instance that the submission is attached to.
    mcs_certificate_number VARCHAR(255),             -- Number on the MCS certificate.
    mcs_certificate_id VARCHAR(255),                 -- ID of the MCS certificate.
    mcs_certificate_date DATE,                       -- Date of the certificate being issued.
    mcs_loaded_date DATE,                            -- Date of data movement to the MCS submission portal.
    mcs_submitted_date DATE,                         -- Date of submission of the MCS certificate.
    mcs_checked_date DATE,                           -- Date when the submission was checked.
    mcs_api_return_message TEXT,                     -- Response message from the MCS API.
    submission_checked_by CHAR(36),                  -- User ID of the person who checked the submission.
    submitted_by CHAR(36),                           -- User ID of the person who submitted the MCS certificate.
    import_id CHAR(36),                              -- Identifier for the import event.
    PRIMARY KEY (mcs_submission_id)
    -- FOREIGN KEY constraints omitted
);

-- Table: sn_mcs_ref_counties
-- Stores submissions related to the MCS API's county reference.
CREATE TABLE IF NOT EXISTS sn_mcs_ref_counties (
    mcs_county_id CHAR(36) NOT NULL,                 -- Unique identifier for each MCS county record.
    mcs_county_name VARCHAR(255) UNIQUE NOT NULL,    -- Name of the county.
    mcs_api_county_id INT NOT NULL,                  -- Numeric ID needed by the MCS API.
    import_id CHAR(36),                              -- Identifier for the import event.
    PRIMARY KEY (mcs_county_id)
    -- FOREIGN KEY constraint omitted
);


INSERT INTO sn_import_events
(import_id, import_date, imported_by, modified_date, modified_by, modification_ref, import_ref, import_source, import_notes)
VALUES
(UUID(), CURRENT_DATE, '4df57691-4d43-4cfb-9338-00e4cfafa63d', CURRENT_DATE, '4df57691-4d43-4cfb-9338-00e4cfafa63d', '', '', 'Manual Region Import', 'Manually importing region data');


INSERT INTO sn_region (region_id, region_number, region_name, import_id)
VALUES
(UUID(), '1', 'Scotland', (SELECT import_id FROM sn_import_events ORDER BY import_date DESC LIMIT 1)),
(UUID(), '2', 'Northern England', (SELECT import_id FROM sn_import_events ORDER BY import_date DESC LIMIT 1)),
(UUID(), '3', 'Southern England', (SELECT import_id FROM sn_import_events ORDER BY import_date DESC LIMIT 1)),
(UUID(), '4', 'Midlands', (SELECT import_id FROM sn_import_events ORDER BY import_date DESC LIMIT 1)),
(UUID(), '5', 'Wales', (SELECT import_id FROM sn_import_events ORDER BY import_date DESC LIMIT 1));
